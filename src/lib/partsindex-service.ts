import axios from 'axios';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö Parts Index API
export interface PartsIndexCatalog {
  id: string;
  name: string;
  image: string;
}

export interface PartsIndexGroup {
  id: string;
  name: string;
  image?: string;
  subgroups: PartsIndexGroup[];
  entityNames: { id: string; name: string; }[];
}

export interface PartsIndexGroupResponse {
  id: string;
  name: string;
  lang: string;
  image: string;
  lft: number;
  rgt: number;
  entityNames: { id: string; name: string; }[];
  subgroups: PartsIndexGroup[];
}

export interface PartsIndexEntity {
  id: string;
  code: string;
  name: {
    id: string;
    name: string;
  };
  originalName: string;
  brand: {
    id: string;
    name: string;
  };
  barcodes: string[];
  parameters: {
    id: string;
    title: string;
    code: string;
    type: string;
    values: {
      id: string;
      value: string;
      title?: string;
    }[];
  }[];
  images: string[];
}

export interface PartsIndexEntitiesResponse {
  pagination: {
    limit: number;
    page: {
      prev: number | null;
      current: number;
      next: number | null;
    };
  };
  list: PartsIndexEntity[];
  catalog: {
    id: string;
    name: string;
    image: string;
    groups: PartsIndexGroup[];
  };
  subgroup: {
    id: string;
    name: string;
  } | null;
}

export interface PartsIndexParamsResponse {
  list: {
    id: string;
    name: string;
    code: string;
    type: 'range' | 'dropdown';
    values: {
      id: string;
      value: string;
      title?: string;
      available: boolean;
    }[];
  }[];
}

export interface PartsIndexEntityInfoResponse {
  list: PartsIndexEntityDetail[];
}

export interface PartsIndexEntityDetail {
  id: string;
  catalog: {
    id: string;
    name: string;
  };
  subgroups: {
    id: string;
    name: string;
  }[];
  name: {
    id: string;
    name: string;
  };
  originalName: string;
  code: string;
  barcodes: string[];
  brand: {
    id: string;
    name: string;
  };
  description: string;
  parameters: {
    id: string;
    name: string;
    params: {
      id: string;
      code: string;
      title: string;
      type: string;
      values: {
        id: string;
        value: string;
      }[];
    }[];
  }[];
  images: string[];
  links: {
    partId: string;
    code: string;
    brand: {
      id: string;
      name: string;
    };
    parameters: {
      id: string;
      name: string;
      unit: string;
      value: string;
    }[];
  }[];
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫—ç—à–∞
interface CacheEntry<T> {
  data: T;
  timestamp: number;
  ttl: number; // –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

class PartsIndexService {
  private baseHost = process.env.PARTSAPI_URL || 'https://api.parts-index.com';
  private baseURL = `${this.baseHost}/v1`;
  private apiKey = process.env.PARTSAPI_KEY || 'PI-E1C0ADB7-E4A8-4960-94A0-4D9C0A074DAE';
  private enabled = Boolean(process.env.PARTSAPI_URL) || process.env.PARTSINDEX_ENABLED === 'true';
  
  // –ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à
  private cache = new Map<string, CacheEntry<any>>();
  private readonly DEFAULT_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
  private readonly CATALOGS_TTL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤
  private readonly GROUPS_TTL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø
  private readonly ENTITIES_TTL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
  private readonly PARAMS_TTL = 60 * 60 * 1000; // 1 —á–∞—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
  private isValidCacheEntry<T>(entry: CacheEntry<T>): boolean {
    return Date.now() - entry.timestamp < entry.ttl;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
  private getFromCache<T>(key: string): T | null {
    const entry = this.cache.get(key);
    if (entry && this.isValidCacheEntry(entry)) {
      console.log(`üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –∫–ª—é—á–∞: ${key}`);
      return entry.data;
    }
    if (entry) {
      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –¥–ª—è –∫–ª—é—á–∞: ${key}`);
      this.cache.delete(key);
    }
    return null;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
  private setCache<T>(key: string, data: T, ttl: number = this.DEFAULT_TTL): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl
    });
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: ${key} (TTL: ${ttl}ms)`);
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π)
  public clearCache(): void {
    this.cache.clear();
    console.log('üóëÔ∏è –ö—ç—à PartsIndex –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫—ç—à–∞
  public clearCacheByPrefix(prefix: string): void {
    const keysToDelete: string[] = [];
    this.cache.forEach((_, key) => {
      if (key.startsWith(prefix)) {
        keysToDelete.push(key);
      }
    });
    
    keysToDelete.forEach(key => this.cache.delete(key));
    console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à PartsIndex —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: ${prefix} (${keysToDelete.length} –∑–∞–ø–∏—Å–µ–π)`);
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
  public getCacheStats(): { size: number; entries: { key: string; size: number; ttl: number; age: number }[] } {
    const entries: { key: string; size: number; ttl: number; age: number }[] = [];
    
    this.cache.forEach((entry, key) => {
      const size = JSON.stringify(entry.data).length;
      const age = Date.now() - entry.timestamp;
      entries.push({ key, size, ttl: entry.ttl, age });
    });

    return {
      size: this.cache.size,
      entries: entries.sort((a, b) => b.size - a.size) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
  async getCatalogs(lang: 'ru' | 'en' = 'ru'): Promise<PartsIndexCatalog[]> {
    if (!this.enabled) {
      // Disabled: return empty to avoid external calls during local dev
      return [];
    }
    const cacheKey = `catalogs_${lang}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.getFromCache<PartsIndexCatalog[]>(cacheKey);
    if (cached) {
      return cached;
    }

    try {
      console.log('üîç PartsIndex –∑–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–æ–≤:', { lang });
      
      const response = await axios.get(`${this.baseURL}/catalogs`, {
        params: { lang },
        headers: {
          'Accept': 'application/json'
        },
        timeout: 10000
      });

      console.log('‚úÖ PartsIndex –∫–∞—Ç–∞–ª–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã:', response.data?.list?.length || 0);

      if (!response.data?.list || !Array.isArray(response.data.list)) {
        console.warn('‚ö†Ô∏è PartsIndex –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤');
        return [];
      }

      const catalogs = response.data.list;
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 1 —á–∞—Å
      this.setCache(cacheKey, catalogs, this.CATALOGS_TTL);
      
      return catalogs;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ PartsIndex getCatalogs:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –∫–∞—Ç–∞–ª–æ–≥–∞
  async getCatalogGroups(catalogId: string, lang: 'ru' | 'en' = 'ru'): Promise<PartsIndexGroup[]> {
    if (!this.enabled) {
      return [];
    }
    const cacheKey = `groups_${catalogId}_${lang}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.getFromCache<PartsIndexGroup[]>(cacheKey);
    if (cached) {
      return cached;
    }

    try {
      console.log('üîç PartsIndex –∑–∞–ø—Ä–æ—Å –≥—Ä—É–ø–ø –∫–∞—Ç–∞–ª–æ–≥–∞:', { catalogId, lang });
      
      const response = await axios.get(`${this.baseURL}/catalogs/${catalogId}/groups`, {
        params: { lang },
        headers: {
          'Accept': 'application/json',
          'Authorization': this.apiKey
        },
        timeout: 10000
      });

      console.log('‚úÖ PartsIndex –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–µ–Ω—ã');

      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –º–∞—Å—Å–∏–≤
      const groupData: PartsIndexGroupResponse = response.data;
      
      if (!groupData || !groupData.subgroups) {
        console.warn('‚ö†Ô∏è PartsIndex –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø');
        return [];
      }

      let groups: PartsIndexGroup[];

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
      if (groupData.subgroups.length > 0) {
        console.log('üìÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–≥—Ä—É–ø–ø:', groupData.subgroups.length);
        groups = groupData.subgroups;
      } else {
        // –ï—Å–ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–∞–º–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        console.log('üìù –ü–æ–¥–≥—Ä—É–ø–ø –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –≥—Ä—É–ø–ø—É');
        groups = [{
          id: groupData.id,
          name: groupData.name,
          image: groupData.image,
          subgroups: [],
          entityNames: groupData.entityNames
        }];
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 24 —á–∞—Å–∞
      this.setCache(cacheKey, groups, this.GROUPS_TTL);
      
      return groups;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ PartsIndex getCatalogGroups:', error);
      return [];
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –ø–æ–ª—É—á–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
  async getAllCatalogEntities(
    catalogId: string,
    groupId: string,
    options: {
      lang?: 'ru' | 'en';
      q?: string;
      engineId?: string;
      generationId?: string;
      params?: Record<string, any>;
      maxItems?: number;
    } = {}
  ): Promise<PartsIndexEntity[]> {
    const { 
      lang = 'ru', 
      q, 
      engineId, 
      generationId, 
      params,
      maxItems = 10000
    } = options;

    try {
      if (!this.enabled) {
        return [];
      }
      console.log('üîç PartsIndex –∑–∞–ø—Ä–æ—Å –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞:', { 
        catalogId, 
        groupId, 
        lang, 
        q,
        maxItems
      });

      const allEntities: PartsIndexEntity[] = [];
      let currentPage = 1;
      const itemsPerPage = 100; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      let hasMorePages = true;

      while (hasMorePages && allEntities.length < maxItems) {
        const response = await this.getCatalogEntities(catalogId, groupId, {
          lang,
          limit: itemsPerPage,
          page: currentPage,
          q,
          engineId,
          generationId,
          params
        });

        if (!response || !response.list || response.list.length === 0) {
          hasMorePages = false;
          break;
        }

        allEntities.push(...response.list);
        
        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}: –ø–æ–ª—É—á–µ–Ω–æ ${response.list.length} —Ç–æ–≤–∞—Ä–æ–≤, –≤—Å–µ–≥–æ: ${allEntities.length}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        hasMorePages = response.pagination && response.pagination.page.next !== null && response.list.length === itemsPerPage;
        currentPage++;

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if (currentPage > 100) {
          console.warn('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (100), –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
          break;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        if (hasMorePages) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }

      console.log(`‚úÖ PartsIndex –ø–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${allEntities.length}`);
      return allEntities;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ PartsIndex:', error);
      return [];
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞
  async getCatalogEntities(
    catalogId: string,
    groupId: string,
    options: {
      lang?: 'ru' | 'en';
      limit?: number;
      page?: number;
      q?: string;
      engineId?: string;
      generationId?: string;
      params?: Record<string, any>;
    } = {}
  ): Promise<PartsIndexEntitiesResponse | null> {
    const { 
      lang = 'ru', 
      limit = 25, 
      page = 1, 
      q, 
      engineId, 
      generationId, 
      params 
    } = options;

    if (!this.enabled) {
      return null;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const cacheKey = `entities_${catalogId}_${groupId}_${lang}_${limit}_${page}_${q || 'no-query'}_${engineId || 'no-engine'}_${generationId || 'no-generation'}_${JSON.stringify(params || {})}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–∫—ç—à–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è)
    const cached = this.getFromCache<PartsIndexEntitiesResponse>(cacheKey);
    if (cached) {
      return cached;
    }

    try {
      console.log('üîç PartsIndex –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞:', { 
        catalogId, 
        groupId, 
        lang, 
        limit, 
        page, 
        q 
      });

      const requestParams: any = {
        lang,
        limit,
        page,
        groupId, // groupId —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –µ—Å—Ç—å
      if (q && q.trim()) {
        requestParams.q = q.trim();
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
      if (engineId) {
        requestParams['car[engineId]'] = engineId;
      }
      if (generationId) {
        requestParams['car[generationId]'] = generationId;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      if (params) {
        Object.keys(params).forEach(key => {
          requestParams[`params[${key}]`] = params[key];
        });
      }

      const response = await axios.get(`${this.baseURL}/catalogs/${catalogId}/entities`, {
        params: requestParams,
        headers: {
          'Accept': 'application/json',
          'Authorization': this.apiKey
        },
        timeout: 15000
      });

      console.log('‚úÖ PartsIndex —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã:', response.data?.list?.length || 0);

      if (!response.data || !response.data.list) {
        console.warn('‚ö†Ô∏è PartsIndex –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤');
        return null;
      }

      const result = response.data;
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 10 –º–∏–Ω—É—Ç (—Ç–æ–≤–∞—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è)
      this.setCache(cacheKey, result, this.ENTITIES_TTL);
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ PartsIndex getCatalogEntities:', error);
      return null;
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  async getCatalogParams(
    catalogId: string,
    groupId: string,
    options: {
      lang?: 'ru' | 'en';
      engineId?: string;
      generationId?: string;
      params?: Record<string, any>;
      q?: string;
    } = {}
  ): Promise<PartsIndexParamsResponse | null> {
    const { 
      lang = 'ru', 
      engineId, 
      generationId, 
      params,
      q 
    } = options;

    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const cacheKey = `params_${catalogId}_${groupId}_${lang}_${q || 'no-query'}_${engineId || 'no-engine'}_${generationId || 'no-generation'}_${JSON.stringify(params || {})}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.getFromCache<PartsIndexParamsResponse>(cacheKey);
    if (cached) {
      return cached;
    }

    try {
      console.log('üîç PartsIndex –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞:', { 
        catalogId, 
        groupId, 
        lang, 
        q 
      });

      const requestParams: any = {
        lang,
        groupId, // groupId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –µ—Å—Ç—å
      if (q && q.trim()) {
        requestParams.q = q.trim();
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
      if (engineId) {
        requestParams['car[engineId]'] = engineId;
      }
      if (generationId) {
        requestParams['car[generationId]'] = generationId;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      if (params) {
        Object.keys(params).forEach(key => {
          requestParams[`params[${key}]`] = params[key];
        });
      }

      const response = await axios.get(`${this.baseURL}/catalogs/${catalogId}/params`, {
        params: requestParams,
        headers: {
          'Accept': 'application/json',
          'Authorization': this.apiKey
        },
        timeout: 15000
      });

      console.log('‚úÖ PartsIndex –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã:', response.data?.list?.length || 0);

      if (!response.data || !response.data.list) {
        console.warn('‚ö†Ô∏è PartsIndex –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
        return null;
      }

      const result = response.data;
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 1 —á–∞—Å
      this.setCache(cacheKey, result, this.PARAMS_TTL);
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ PartsIndex getCatalogParams:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async getCategoriesWithGroups(lang: 'ru' | 'en' = 'ru'): Promise<Array<PartsIndexCatalog & { groups: PartsIndexGroup[] }>> {
    const cacheKey = `categories_with_groups_${lang}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.getFromCache<Array<PartsIndexCatalog & { groups: PartsIndexGroup[] }>>(cacheKey);
    if (cached) {
      return cached;
    }

    try {
      console.log('üîç PartsIndex –∑–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–∞–ª–æ–≥–∏
      const catalogs = await this.getCatalogs(lang);
      
      if (catalogs.length === 0) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ PartsIndex');
        return [];
      }

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –≥—Ä—É–ø–ø—ã
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const BATCH_SIZE = 3;
      const catalogsWithGroups: Array<PartsIndexCatalog & { groups: PartsIndexGroup[] }> = [];

      for (let i = 0; i < catalogs.length; i += BATCH_SIZE) {
        const batch = catalogs.slice(i, i + BATCH_SIZE);
        
        const batchResults = await Promise.all(
          batch.map(async (catalog) => {
            try {
              const groups = await this.getCatalogGroups(catalog.id, lang);
              return {
                ...catalog,
                groups
              };
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ ${catalog.id}:`, error);
              return {
                ...catalog,
                groups: []
              };
            }
          })
        );

        catalogsWithGroups.push(...batchResults);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
        if (i + BATCH_SIZE < catalogs.length) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }

      console.log('‚úÖ PartsIndex –ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞:', catalogsWithGroups.length, '–∫–∞—Ç–∞–ª–æ–≥–æ–≤');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 24 —á–∞—Å–∞
      this.setCache(cacheKey, catalogsWithGroups, this.CATALOGS_TTL);
      
      return catalogsWithGroups;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PartsIndex:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
  async getEntityById(
    catalogId: string,
    entityId: string,
    lang: 'ru' | 'en' = 'ru'
  ): Promise<PartsIndexEntityDetail | null> {
    try {
      if (!this.enabled) {
        return null;
      }
      console.log('üîç PartsIndex –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞:', { catalogId, entityId, lang });
      
      const response = await axios.get(`${this.baseURL}/catalogs/${catalogId}/entities/${entityId}`, {
        params: { lang },
        headers: {
          'Accept': 'application/json',
          'Authorization': this.apiKey
        },
        timeout: 10000
      });

      console.log('‚úÖ PartsIndex –¥–µ—Ç–∞–ª—å —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞');

      if (!response.data) {
        console.warn('‚ö†Ô∏è PartsIndex –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞');
        return null;
      }

      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ PartsIndex getEntityById:', error);
      return null;
    }
  }

  // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –±—Ä–µ–Ω–¥—É (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø)
  async searchEntityByArticle(
    articleNumber: string,
    brandName: string,
    lang: 'ru' | 'en' = 'ru'
  ): Promise<PartsIndexEntity | null> {
    console.log('‚ö†Ô∏è PartsIndex searchEntityByArticle –û–¢–ö–õ–Æ–ß–ï–ù –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤');
    return null;
    
    // –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê (–ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ê):
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–µ–ª–∞–µ—Ç —Å–æ—Ç–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ—Ö–æ–¥—è—Å—å –ø–æ –≤—Å–µ–º –∫–∞—Ç–∞–ª–æ–≥–∞–º –∏ –≥—Ä—É–ø–ø–∞–º
    // –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å searchEntityInSpecificCatalog –µ—Å–ª–∏ –∑–Ω–∞–µ–º catalogId –∏ groupId
  }

  // –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –±—Ä–µ–Ω–¥—É (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥)
  async searchEntityByCode(
    code: string,
    brand?: string,
    lang: 'ru' | 'en' = 'ru'
  ): Promise<PartsIndexEntityDetail | null> {
    try {
      if (!this.enabled) {
        return null;
      }
      console.log('üîç PartsIndex –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É:', { code, brand, lang });
      
      const params: any = {
        code: code.trim(),
        lang
      };
      
      if (brand && brand.trim()) {
        params.brand = brand.trim();
      }
      
      const response = await axios.get(`${this.baseURL}/entities`, {
        params,
        headers: {
          'Accept': 'application/json',
          'Authorization': this.apiKey
        },
        timeout: 10000
      });

      console.log('‚úÖ PartsIndex –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ - –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');

      if (!response.data || !response.data.list || response.data.list.length === 0) {
        console.warn('‚ö†Ô∏è PartsIndex –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É:', code);
        return null;
      }

      const entity = response.data.list[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.log('‚úÖ PartsIndex –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:', {
        code: entity.code,
        brand: entity.brand?.name,
        images: entity.images?.length || 0,
        parameters: entity.parameters?.length || 0,
        totalParams: entity.parameters?.reduce((acc: number, p: any) => acc + (p.params?.length || 0), 0) || 0
      });

      return entity;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞ PartsIndex:', error);
      return null;
    }
  }

  // –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –≥—Ä—É–ø–ø–µ
  async searchEntityInSpecificCatalog(
    catalogId: string,
    groupId: string,
    articleNumber: string,
    brandName: string,
    lang: 'ru' | 'en' = 'ru'
  ): Promise<PartsIndexEntity | null> {
    try {
      if (!this.enabled) {
        return null;
      }
      console.log('üîç PartsIndex –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', { 
        catalogId, 
        groupId, 
        articleNumber, 
        brandName, 
        lang 
      });
      
      // –ü–æ–∏—Å–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ –∫–∞—Ç–∞–ª–æ–≥–∞
      const entities = await this.getCatalogEntities(catalogId, groupId, {
        lang,
        q: `${brandName} ${articleNumber}`,
        limit: 50
      });
      
      if (entities && entities.list) {
        console.log('üîç PartsIndex –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', entities.list.length);
        console.log('üîç PartsIndex –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞:', entities.list.slice(0, 3).map(e => ({ code: e.code, brand: e.brand.name })));
        
        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        const exactMatch = entities.list.find(entity => 
          entity.code.toLowerCase() === articleNumber.toLowerCase()
        );
        
        if (exactMatch) {
          console.log('‚úÖ PartsIndex –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', exactMatch.code, exactMatch.brand.name);
          return exactMatch;
        }
        
        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ –±—Ä–µ–Ω–¥—É –∏ –∞—Ä—Ç–∏–∫—É–ª—É
        const brandMatch = entities.list.find(entity => 
          entity.code.toLowerCase() === articleNumber.toLowerCase() && 
          entity.brand.name.toLowerCase().includes(brandName.toLowerCase())
        );
        
        if (brandMatch) {
          console.log('‚úÖ PartsIndex –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ —á–∞—Å—Ç–∏ –±—Ä–µ–Ω–¥–∞:', brandMatch.code, brandMatch.brand.name);
          return brandMatch;
        }
      }
      
      console.log('‚ùå PartsIndex —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', { catalogId, groupId, articleNumber, brandName });
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ PartsIndex –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      return null;
    }
  }
}

export const partsIndexService = new PartsIndexService(); 
