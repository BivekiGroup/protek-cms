import { ApolloServer } from '@apollo/server'
import { startServerAndCreateNextHandler } from '@as-integrations/next'
import { typeDefs } from '@/lib/graphql/typeDefs'
import { resolvers } from '@/lib/graphql/resolvers'
import { extractTokenFromHeaders, getUserFromToken } from '@/lib/auth'
import jwt from 'jsonwebtoken'

interface Context {
  userId?: string
  clientId?: string
  userRole?: string
  userEmail?: string
  headers?: Headers
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
async function createContext(req: any): Promise<Context> {
  const requestHeaders = req.headers
  const token = extractTokenFromHeaders(requestHeaders)
  console.log('GraphQL: –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:', token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç')
  
  if (!token) {
    return { headers: requestHeaders }
  }

  try {
    // –≠—Ç–æ JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
    const payload = getUserFromToken(token)
    console.log('GraphQL: JWT payload:', payload ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω')
    if (payload) {
      console.log('GraphQL: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', payload.userId, '—Ä–æ–ª—å:', payload.role)
      return {
        userId: payload.userId,
        userRole: payload.role,
        userEmail: payload.email,
        headers: requestHeaders
      }
    }
  } catch (error) {
    console.error('GraphQL: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–∫–µ–Ω–∞:', error)
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ª–∏ —ç—Ç–æ —Ç–æ–∫–µ–Ω
  if (token.startsWith('client_')) {
    console.log('GraphQL: –Ω–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ç–æ–∫–µ–Ω:', token)
    
    const tokenParts = token.split('_')
    let clientId: string
    
    if (tokenParts.length >= 2) {
      // –≠—Ç–æ —Ç–æ–∫–µ–Ω —Ñ–æ—Ä–º–∞—Ç–∞ client_${clientId} –∏–ª–∏ client_${clientId}_${timestamp}
      clientId = tokenParts[1]
      console.log('GraphQL: –∏–∑–≤–ª–µ—á–µ–Ω clientId –∏–∑ —Ç–æ–∫–µ–Ω–∞:', clientId)
    } else {
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
      console.error('GraphQL: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', token)
      return { headers: requestHeaders }
    }
    
    const context = {
      clientId: clientId,
      headers: requestHeaders
    }
    console.log('GraphQL: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', context)
    return context
  }

  // –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ JWT –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ç–æ–∫–µ–Ω
  try {
    const decoded = jwt.decode(token) as any
    if (decoded && decoded.clientId) {
      console.log('GraphQL: –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ JWT:', decoded.clientId)
      return {
        clientId: decoded.clientId,
        headers: requestHeaders
      }
    }
  } catch (error) {
    console.error('GraphQL: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', error)
  }

  return { headers: requestHeaders }
}

const server = new ApolloServer({
  typeDefs,
  resolvers,
  introspection: true,
  plugins: [
    {
      async requestDidStart() {
        return {
          async didResolveOperation(requestContext: any) {
            console.log('üîç GraphQL Operation:', {
              operationName: requestContext.request.operationName,
              query: requestContext.request.query?.replace(/\s+/g, ' ').substring(0, 200) + '...',
              variables: requestContext.request.variables
            });
          },
          async didEncounterErrors(requestContext: any) {
            console.error('‚ùå GraphQL Errors:', requestContext.errors);
          }
        };
      }
    }
  ]
})

const handler = startServerAndCreateNextHandler(server, {
  context: async (req) => {
    const context = await createContext(req)
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —Ä–µ–∑–æ–ª–≤–µ—Ä–æ–≤
    ;(global as any).__graphqlContext = context
    return context
  }
})

// –ü—Ä–æ—Å—Ç–∞—è CORS-–ø–æ–¥–¥–µ—Ä–∂–∫–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–∞ –≤ dev –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç–∞–ª–∞—Ö)
function getCorsHeaders() {
  const isDev = process.env.NODE_ENV === 'development'
  // –í dev —è–≤–Ω–æ —É–∫–∞–∂–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–æ—Ä–∏–≥–∏–Ω, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏/–∫—Ä–µ–¥–µ–Ω—à–µ–ª–∞–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
  const allowedOrigin = isDev
    ? (process.env.FRONTEND_ORIGIN || 'http://localhost:3001')
    : (process.env.FRONTEND_ORIGIN || 'https://protekauto.ru')
  return {
    'Access-Control-Allow-Origin': allowedOrigin,
    'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
  }
}

export async function OPTIONS() {
  return new Response(null, { status: 204, headers: getCorsHeaders() })
}

async function withCors(request: Request) {
  const res = await handler(request)
  const resHeaders = new Headers(res.headers)
  const cors = getCorsHeaders()
  Object.entries(cors).forEach(([k, v]) => resHeaders.set(k, v))
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–ª–æ–Ω–∏—Ä—É–µ–º —Ç–µ–ª–æ –≤ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –ø–æ—Ç–æ–∫
  const text = await res.text()
  return new Response(text, { status: res.status, statusText: res.statusText, headers: resHeaders })
}

export async function GET(request: Request) {
  return withCors(request)
}

export async function POST(request: Request) {
  return withCors(request)
} 
